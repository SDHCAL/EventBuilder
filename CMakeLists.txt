cmake_minimum_required(VERSION 2.8)
project (EventBuilder)

find_library(LOCCI_SUPPORT NAMES occi)
if(LOCCI_SUPPORT)
  message("LOCCI found")
  SET(HaveOCCI 1)
  SET(GCC_COVERAGE_LINK_FLAGS "-locci -lclntsh -g0")
  SET (CMAKE_SHARED_LINKER_FLAGS "${GCC_COVERAGE_LINK_FLAGS}")
  SET(CMAKE_EXE_LINKER_FLAGS "${GCC_COVERAGE_LINK_FLAGS}" )
  add_definitions(-DOCCI_SUPPORT)
else()
  message("No LOCCI support")
  SET(HaveOCCI 0)
endif()

# -------- compiler definitions ----------------------------------------------
ADD_DEFINITIONS( "-Wall -ansi -Wno-long-long -Wno-sign-compare -fno-strict-aliasing -g -lpthread -ldl -lm" )
list(APPEND CMAKE_PREFIX_PATH $ENV{ROOTSYS})
#find_package(ROOT REQUIRED)
#include(${ROOT_USE_FILE})

set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/)
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/)
set(LIBRARY_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/lib)
set(PROJECT_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/build/include)

include_directories("${PROJECT_INCLUDE_DIR}")
include_directories("${PROJECT_SOURCE_DIR}")
add_subdirectory(tinyxml)
add_subdirectory(sio)
add_subdirectory(lcio)
add_subdirectory(marlino)
# -------------------------------------------------
# build the database library
if(HaveOCCI)
add_subdirectory(Database)
endif()
add_subdirectory(Common)
add_subdirectory(Geometry)
add_subdirectory(Reader)
#add_subdirectory(Streamout)
#add_subdirectory(Trivent)
#add_subdirectory(Analysis)
add_subdirectory(Elog)
#add_subdirectory(test)
